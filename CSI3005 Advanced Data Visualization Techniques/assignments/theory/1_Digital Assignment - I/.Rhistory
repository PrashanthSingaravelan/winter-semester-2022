acadia <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/acadia.csv")
head(acadia)
# Southeast US National Parks
se <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/se.csv")
head(se)
# 2016 Visitation for all Pacific West National Parks
visit_16 <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/visit_16.csv")
head(visit_16)
# All Nationally designated sites in Massachusetts
mass <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/mass.csv")
head(mass)
scatter_plot = plot_ly(data=ca, x=~year), y=~visitors,  color = ~park_name,
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors),  color = ~park_name,
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,  color = ~park_name,type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,  color = ~park_name,type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
library(tidyverse)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
# Acadia National Park
acadia <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/acadia.csv")
head(acadia)
# Southeast US National Parks
se <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/se.csv")
head(se)
# 2016 Visitation for all Pacific West National Parks
visit_16 <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/visit_16.csv")
head(visit_16)
# All Nationally designated sites in Massachusetts
mass <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/mass.csv")
head(mass)
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
library(tidyverse)
library(plotly)
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count')))
r_barchart
```{r}
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count')))
r_barchart
r_barchart = plot_ly(data=ca, x=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count')))
r_barchart
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count'),, barmode = 'group'))
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count'), barmode = 'group'))
r_barchart
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on Vore"),
legend = list(title = list(text= '<b>Aniamal Feature')),
xaxis  = list(title = list(text ='<b>Vores')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df_order = data.frame(table(ca$park_name))
df_order
pie_chart = plot_ly(type='pie', labels=df_order$Var1, values=df_order$Freq,
textinfo='label+percent',insidetextorientation='radial') %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
pie_chart
df_vore = data.frame(table(ca$park_name))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
df_vore = data.frame(table(ca$state))
df_vore
df_vore = data.frame(table(ca$code))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
histogram_plot = plot_ly(data = ca, x = ~visitors, name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(-log10(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(log10(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(scale(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>Visitors')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
library(tidyverse)
library(plotly)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
# Acadia National Park
acadia <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/acadia.csv")
head(acadia)
# Southeast US National Parks
se <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/se.csv")
head(se)
# 2016 Visitation for all Pacific West National Parks
visit_16 <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/visit_16.csv")
head(visit_16)
# All Nationally designated sites in Massachusetts
mass <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/mass.csv")
head(mass)
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on Vore"),
legend = list(title = list(text= '<b>Aniamal Feature')),
xaxis  = list(title = list(text ='<b>Vores')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df_order = data.frame(table(ca$park_name))
df_order
pie_chart = plot_ly(type='pie', labels=df_order$Var1, values=df_order$Freq,
textinfo='label+percent',insidetextorientation='radial') %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
pie_chart
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>Visitors')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
df_vore = data.frame(table(ca$code))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
library(gganimate)
library(gifski)
#scatter_plot_animate = ggplot(data=ca, aes(year, visitors)) + geom_point() +
#                       transition_states(park_name)
#animate(scatter_plot_animate, renderer = gifski_renderer())
## filtering out only 'CHIS', 'DEVA' AND 'JOTR' Park_code
d = ca %>%
filter(code%in%c('CHIS', 'DEVA', 'JOTR'))
d
line_plot = ggplot(d, aes(x=year, y=visitors, group=code, color=code)) +
geom_line() + geom_point() +
transition_reveal(year)
animate(line_plot, width=300, height=300, renderer = gifski_renderer())
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
# National Parks in California
df = read_csv("zomato.csv")
head(df)
colnames(df)
str(df)
bar_plot = ggplot(data=df, aes(x = Rating.color, y = ..count.. / sum(..count..),fill = factor(Rating.color))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(City,n),y=n))+geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip()
df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(City,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
# National Parks in California
df = read_csv("zomato.csv")
df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(City,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
bar_plot = ggplot(data=df, aes(x = Rating.color, y = ..count.. / sum(..count..),fill = factor(Rating.color))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
# National Parks in California
df = read_csv("zomato.csv")
head(df)
colnames(df)
str(df)
bar_plot = ggplot(data=df, aes(x = Rating.color, y = ..count.. / sum(..count..),fill = factor(Rating.color))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(City,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
df %>%
filter(Country.Code==1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
#bar_plot = ggplot(data=df, aes(x = Rating.color, y = ..count.. / sum(..count..),fill = factor(Rating.color))) +
#           geom_bar(color='black') +
#           labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
#                title = "Occurence of the National Parks in the data-set") +
#
#           scale_x_discrete(labels =labs)
#           scale_y_continuous(labels = scales::percent)
#bar_plot + coord_flip()
df %>%
filter(Country.Code==1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
# National Parks in California
df = read_csv("zomato.csv")
head(df)
colnames(df)
str(df)
#bar_plot = ggplot(data=df, aes(x = Rating.color, y = ..count.. / sum(..count..),fill = factor(Rating.color))) +
#           geom_bar(color='black') +
#           labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
#                title = "Occurence of the National Parks in the data-set") +
#
#           scale_x_discrete(labels =labs)
#           scale_y_continuous(labels = scales::percent)
#bar_plot + coord_flip()
#df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
#  ggplot(aes(x=reorder(City,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
#  coord_flip() +
#  theme(panel.background = element_blank(),
#        strip.background = element_blank(),
#        axis.title = element_text(color = '#2d2d2d'),
#        strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
#        plot.title = element_text(hjust=0.5,face='bold',size=15))+
#       labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
df %>%
filter(Country.Code==1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
library(dplyr)
df %>%
filter(Country.Code==1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
library(dplyr)
# National Parks in California
df = read_csv("zomato.csv")
head(df)
colnames(df)
str(df)
#bar_plot = ggplot(data=df, aes(x = Rating.color, y = ..count.. / sum(..count..),fill = factor(Rating.color))) +
#           geom_bar(color='black') +
#           labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
#                title = "Occurence of the National Parks in the data-set") +
#
#           scale_x_discrete(labels =labs)
#           scale_y_continuous(labels = scales::percent)
#bar_plot + coord_flip()
#df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
#  ggplot(aes(x=reorder(City,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
#  coord_flip() +
#  theme(panel.background = element_blank(),
#        strip.background = element_blank(),
#        axis.title = element_text(color = '#2d2d2d'),
#        strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
#        plot.title = element_text(hjust=0.5,face='bold',size=15))+
#       labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
df %>%
filter(Country.Code==1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
library(dplyr)
library(tidyverse)
# National Parks in California
df = read_csv("zomato.csv")
head(df)
str(df)
df %>%
filter(Country.Code==1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
df %>%
filter(Country.Code = 1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
df %>%
filter(Country Code == 1) %>%
df %>%
filter('Country Code' == 1) %>%
select('Restaurant ID') %>%
unique() %>%
nrow()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
df$Country/Code
df$Country.Code
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
#bar_plot + coord_flip()
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>% filter(Country.Code==1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(City,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
df %>% filter(`Country Code` == 1) %>% select(`Restaurant ID`,`City`) %>% unique() %>% group_by(`City`) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(`City`,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
library(tidyverse)
library(plotly)
library(ggplot2)
require(devtools)
library(dplyr)
library(tidyverse)
# National Parks in California
df = read_csv("zomato.csv")
head(df)
colnames(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
