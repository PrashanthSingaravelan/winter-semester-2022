print(paste("Attributes of the data-set"))
print(paste("Attributes of the data-set"))
print(colnames(data_2014))
cat(paste("Attributes of the data-set"))
colnames(data_2014)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse) # metapackage of all tidyverse packages
library(DT)
library(scales)
apr_data <- read.csv("Uber-dataset//uber-raw-data-apr14.csv")
may_data <- read.csv("Uber-dataset//uber-raw-data-may14.csv")
jun_data <- read.csv("Uber-dataset//uber-raw-data-jun14.csv")
jul_data <- read.csv("Uber-dataset//uber-raw-data-jul14.csv")
aug_data <- read.csv("Uber-dataset//uber-raw-data-aug14.csv")
sep_data <- read.csv("Uber-dataset//uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
head(data_2014)
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
data_2014$day   = factor(day(data_2014$Date.Time))
data_2014$month = factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year  = factor(year(data_2014$Date.Time))
data_2014$dayofweek = factor(wday(data_2014$Date.Time, label = TRUE))
head(data_2014)
print(paste("Attributes of the data-set"))
colnames(data_2014)
str(data_2014)
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
data_2014$day   = factor(day(data_2014$Date.Time))
data_2014$month = factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year  = factor(year(data_2014$Date.Time))
data_2014$dayofweek = factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
head(data_2014)
print(paste("Attributes of the data-set"))
colnames(data_2014)
str(data_2014)
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
datatable(hour_data)
ggplot(hour_data, aes(hour, Total)) +
geom_bar( stat = "identity", fill = "steelblue", color = "red") +
ggtitle("Trips Every Hour") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
month_hour <- data_2014 %>%
group_by(month, hour) %>%
dplyr::summarize(Total = n())
ggplot(month_hour, aes(hour, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") +
scale_y_continuous(labels = comma)
month_hour
datatable(month_hour)
ggplot(month_hour, aes(hour, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") +
scale_y_continuous(labels = comma)
ggplot(data=month_hour, aes(x=hour, y=Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") +
scale_y_continuous(labels = comma)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse) # metapackage of all tidyverse packages
library(DT)
library(scales)
apr_data <- read.csv("Uber-dataset//uber-raw-data-apr14.csv")
may_data <- read.csv("Uber-dataset//uber-raw-data-may14.csv")
jun_data <- read.csv("Uber-dataset//uber-raw-data-jun14.csv")
jul_data <- read.csv("Uber-dataset//uber-raw-data-jul14.csv")
aug_data <- read.csv("Uber-dataset//uber-raw-data-aug14.csv")
sep_data <- read.csv("Uber-dataset//uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
head(data_2014)
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse) # metapackage of all tidyverse packages
library(DT)
library(scales)
library(lubridate)
apr_data <- read.csv("Uber-dataset//uber-raw-data-apr14.csv")
may_data <- read.csv("Uber-dataset//uber-raw-data-may14.csv")
jun_data <- read.csv("Uber-dataset//uber-raw-data-jun14.csv")
jul_data <- read.csv("Uber-dataset//uber-raw-data-jul14.csv")
aug_data <- read.csv("Uber-dataset//uber-raw-data-aug14.csv")
sep_data <- read.csv("Uber-dataset//uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
head(data_2014)
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
data_2014$day   = factor(day(data_2014$Date.Time))
data_2014$month = factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year  = factor(year(data_2014$Date.Time))
data_2014$dayofweek = factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
head(data_2014)
print(paste("Attributes of the data-set"))
colnames(data_2014)
str(data_2014)
## In a particular hour, how many trips have covered
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
datatable(hour_data)
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse) # metapackage of all tidyverse packages
library(DT)
library(scales)
library(lubridate)
apr_data <- read.csv("Uber-dataset//uber-raw-data-apr14.csv")
may_data <- read.csv("Uber-dataset//uber-raw-data-may14.csv")
jun_data <- read.csv("Uber-dataset//uber-raw-data-jun14.csv")
jul_data <- read.csv("Uber-dataset//uber-raw-data-jul14.csv")
aug_data <- read.csv("Uber-dataset//uber-raw-data-aug14.csv")
sep_data <- read.csv("Uber-dataset//uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
head(data_2014)
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
data_2014$day   = factor(day(data_2014$Date.Time))
data_2014$month = factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year  = factor(year(data_2014$Date.Time))
data_2014$dayofweek = factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
head(data_2014)
print(paste("Attributes of the data-set"))
colnames(data_2014)
str(data_2014)
## In a particular hour, how many trips have covered
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
datatable(hour_data)
ggplot(hour_data, aes(hour, Total)) +
geom_bar( stat = "identity", fill = "steelblue", color = "red") +
ggtitle("Trips Every Hour") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
## In a particular month, how many trips have covered [time by time]
month_hour <- data_2014 %>%
group_by(month, hour) %>%
dplyr::summarize(Total = n())
ggplot(data=month_hour, aes(x=hour, y=Total, fill = month)) + geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") + scale_y_continuous(labels = comma)
day_group <- data_2014 %>%
group_by(day) %>%
dplyr::summarize(Total = n())
datatable(day_group)
ggplot(day_group, aes(day, Total)) +
geom_bar( stat = "identity", fill = "steelblue") +
ggtitle("Trips Every Day") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
day_month_group <- data_2014 %>%
group_by(month, day) %>%
dplyr::summarize(Total = n())
day_month_group
ggplot(day_month_group, aes(day, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Day and Month") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse) # metapackage of all tidyverse packages
library(DT)
library(scales)
library(lubridate)
apr_data <- read.csv("Uber-dataset//uber-raw-data-apr14.csv")
may_data <- read.csv("Uber-dataset//uber-raw-data-may14.csv")
jun_data <- read.csv("Uber-dataset//uber-raw-data-jun14.csv")
jul_data <- read.csv("Uber-dataset//uber-raw-data-jul14.csv")
aug_data <- read.csv("Uber-dataset//uber-raw-data-aug14.csv")
sep_data <- read.csv("Uber-dataset//uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
head(data_2014)
data_2014$Date.Time = as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
## creating a time attribute
data_2014$Time      = format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time = ymd_hms(data_2014$Date.Time)
head(data_2014)
data_2014$day   = factor(day(data_2014$Date.Time))
data_2014$month = factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year  = factor(year(data_2014$Date.Time))
data_2014$dayofweek = factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
head(data_2014)
print(paste("Attributes of the data-set"))
colnames(data_2014)
str(data_2014)
## In a particular hour, how many trips have covered
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
datatable(hour_data)
ggplot(hour_data, aes(hour, Total)) +
geom_bar( stat = "identity", fill = "steelblue", color = "red") +
ggtitle("Trips Every Hour") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
## In a particular month, how many trips have covered [time by time]
month_hour <- data_2014 %>%
group_by(month, hour) %>%
dplyr::summarize(Total = n())
ggplot(data=month_hour, aes(x=hour, y=Total, fill = month)) + geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") + scale_y_continuous(labels = comma)
day_group <- data_2014 %>%
group_by(day) %>%
dplyr::summarize(Total = n())
datatable(day_group)
ggplot(day_group, aes(day, Total)) +
geom_bar( stat = "identity", fill = "steelblue") +
ggtitle("Trips Every Day") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
day_month_group <- data_2014 %>%
group_by(month, day) %>%
dplyr::summarize(Total = n())
day_month_group
ggplot(day_month_group, aes(day, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Day and Month") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
## In a particular month, how many trips have covered [time by time]
month_hour = data_2014 %>% group_by(month, hour) %>% dplyr::summarize(Total = n())
day_group  = data_2014 %>% group_by(day) %>% dplyr::summarize(Total = n())
day_month_group = data_2014 %>% group_by(month, day) %>% dplyr::summarize(Total = n())
ggplot(day_month_group, aes(day, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Day and Month") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
ggplot(data=month_hour, aes(x=hour, y=Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") +
scale_y_continuous(labels = comma)
ggplot(day_group, aes(day, Total)) +
geom_bar( stat = "identity", fill = "steelblue") +
ggtitle("Trips Every Day") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
## In a particular month, how many trips have covered [time by time]
month_hour = data_2014 %>% group_by(month, hour) %>% dplyr::summarize(Total = n())
day_group  = data_2014 %>% group_by(day) %>% dplyr::summarize(Total = n())
day_month_group = data_2014 %>% group_by(month, day) %>% dplyr::summarize(Total = n())
month_group = data_2014 %>% group_by(month) %>% dplyr::summarize(Total = n())
ggplot( , aes(month, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Month") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
ggplot( , aes(month, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Month") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
ggplot(month_group, aes(month, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Month") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
library(tidyverse)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
# Acadia National Park
acadia <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/acadia.csv")
head(acadia)
# Southeast US National Parks
se <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/se.csv")
head(se)
# 2016 Visitation for all Pacific West National Parks
visit_16 <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/visit_16.csv")
head(visit_16)
# All Nationally designated sites in Massachusetts
mass <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/mass.csv")
head(mass)
scatter_plot = plot_ly(data=ca, x=~year), y=~visitors,  color = ~park_name,
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors),  color = ~park_name,
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,  color = ~park_name,type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,  color = ~park_name,type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
library(tidyverse)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
# Acadia National Park
acadia <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/acadia.csv")
head(acadia)
# Southeast US National Parks
se <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/se.csv")
head(se)
# 2016 Visitation for all Pacific West National Parks
visit_16 <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/visit_16.csv")
head(visit_16)
# All Nationally designated sites in Massachusetts
mass <- read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/mass.csv")
head(mass)
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
library(tidyverse)
library(plotly)
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Body weight vs Brain weight"),
legend = list(title = list(text ='<b>Animals')),
xaxis  = list(title = list(text ='<b>Brain Weight')),
yaxis  = list(title = list(text ='<b>Body Weight')))
scatter_plot
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count')))
r_barchart
```{r}
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count')))
r_barchart
r_barchart = plot_ly(data=ca, x=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count')))
r_barchart
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count'),, barmode = 'group'))
r_barchart = plot_ly(data=ca, y=~park_name, type="bar") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total', tickformat = "%")),
yaxis  = list(title = list(text ='<b>Count'), barmode = 'group'))
r_barchart
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on Vore"),
legend = list(title = list(text= '<b>Aniamal Feature')),
xaxis  = list(title = list(text ='<b>Vores')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df_order = data.frame(table(ca$park_name))
df_order
pie_chart = plot_ly(type='pie', labels=df_order$Var1, values=df_order$Freq,
textinfo='label+percent',insidetextorientation='radial') %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
pie_chart
df_vore = data.frame(table(ca$park_name))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
df_vore = data.frame(table(ca$state))
df_vore
df_vore = data.frame(table(ca$code))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
histogram_plot = plot_ly(data = ca, x = ~visitors, name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(-log10(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(log10(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(scale(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>sleep total')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>Visitors')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
