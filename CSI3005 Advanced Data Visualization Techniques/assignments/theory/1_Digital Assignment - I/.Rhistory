r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on the Data-Set"),
legend = list(title = list(text= '<b>Attribute')),
xaxis  = list(title = list(text ='<b>Vores')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on the Data-Set"),
legend = list(title = list(text= '<b>Attribute')),
xaxis  = list(title = list(text ='<b>Parks')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df = read.csv('zomato.csv')
head(df)
col(df)
col_names(df)
names(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
df %>% filter(`Country Code` == 1) %>% select(`Restaurant ID`,`City`) %>% unique() %>% group_by(`City`) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(`City`,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
library(tidyverse)
library(plotly)
require(devtools)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
colnames(ca)
str(ca)
labs = c(
'CHIS'='Channel Islands National Park',
'DEVA'='Death Valley National Park',
'JOTR'='Joshua Tree National Park',
'KICA'='Kings Canyon National Park',
'LAVO'='Lassen Volcanic National Park',
'YOSE'='Yosemite National Park',
'SEQU'='Sequoia National Park',
'REDW'='Redwood National Park',
'PINN'='Pinnacles National Park'
)
bar_plot = ggplot(data=ca, aes(x = code, y = ..count.. / sum(..count..),fill = factor(code))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
density_plot = ggplot(data=ca, aes(x =log10(visitors))) +
geom_density(fill = "indianred3") +
labs(x = "Number of visitors", y="density", title="Kernal density of Visitors")
density_plot
t <- list(family = "Helvetica",size = 14,color = "blue")
t1 <- list(family = "Times New Roman",color = "red")
t2 <- list(family = "Courier New",size = 14,color = "green")
t3 <- list(family = 'Arial')
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Year and Visitors"),
legend = list(title = list(text ='<b>National Parks')),
xaxis  = list(title = list(text ='<b>Year')),
yaxis  = list(title = list(text ='<b>Visitors')),
plot_bgcolor='#e5ecf6')
scatter_plot
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on the Data-Set"),
legend = list(title = list(text= '<b>Attribute')),
xaxis  = list(title = list(text ='<b>Parks')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
library(tidyverse)
library(plotly)
require(devtools)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
colnames(ca)
str(ca)
labs = c(
'CHIS'='Channel Islands National Park',
'DEVA'='Death Valley National Park',
'JOTR'='Joshua Tree National Park',
'KICA'='Kings Canyon National Park',
'LAVO'='Lassen Volcanic National Park',
'YOSE'='Yosemite National Park',
'SEQU'='Sequoia National Park',
'REDW'='Redwood National Park',
'PINN'='Pinnacles National Park'
)
bar_plot = ggplot(data=ca, aes(x = code, y = ..count.. / sum(..count..),fill = factor(code))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
density_plot = ggplot(data=ca, aes(x =log10(visitors))) +
geom_density(fill = "indianred3") +
labs(x = "Number of visitors", y="density", title="Kernal density of Visitors")
density_plot
t <- list(family = "Helvetica",size = 14,color = "blue")
t1 <- list(family = "Times New Roman",color = "red")
t2 <- list(family = "Courier New",size = 14,color = "green")
t3 <- list(family = 'Arial')
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Year and Visitors"),
legend = list(title = list(text ='<b>National Parks')),
xaxis  = list(title = list(text ='<b>Year')),
yaxis  = list(title = list(text ='<b>Visitors')),
plot_bgcolor='#e5ecf6')
scatter_plot
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on the Data-Set"),
legend = list(title = list(text= '<b>Attribute')),
xaxis  = list(title = list(text ='<b>Parks')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df_order = data.frame(table(ca$park_name))
df_order
pie_chart = plot_ly(type='pie', labels=df_order$Var1, values=df_order$Freq,
textinfo='label+percent',insidetextorientation='radial') %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
pie_chart
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>Visitors')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
df_vore = data.frame(table(ca$code))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
library(gganimate)
library(gifski)
#scatter_plot_animate = ggplot(data=ca, aes(year, visitors)) + geom_point() +
#                       transition_states(park_name)
#animate(scatter_plot_animate, renderer = gifski_renderer())
## filtering out only 'CHIS', 'DEVA' AND 'JOTR' Park_code
d = ca %>%
filter(code%in%c('CHIS', 'DEVA', 'JOTR'))
d
#line_plot = ggplot(d, aes(x=year, y=visitors, group=code, color=code)) +
#                   geom_line() + geom_point() +
#                   transition_reveal(year)
#animate(line_plot, width=300, height=300, renderer = gifski_renderer())
df = read.csv('zomato.csv')
head(df)
names(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
df = read.csv('zomato.csv')
head(df)
names(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
library(dplyr)
df = read.csv('zomato.csv')
head(df)
names(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
df %>% filter(`Country Code` == 1) %>% select(`Restaurant ID`,`City`) %>% unique() %>% group_by(`City`) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(`City`,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
library(tidyverse)
library(plotly)
require(devtools)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
colnames(ca)
str(ca)
labs = c(
'CHIS'='Channel Islands National Park',
'DEVA'='Death Valley National Park',
'JOTR'='Joshua Tree National Park',
'KICA'='Kings Canyon National Park',
'LAVO'='Lassen Volcanic National Park',
'YOSE'='Yosemite National Park',
'SEQU'='Sequoia National Park',
'REDW'='Redwood National Park',
'PINN'='Pinnacles National Park'
)
bar_plot = ggplot(data=ca, aes(x = code, y = ..count.. / sum(..count..),fill = factor(code))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
density_plot = ggplot(data=ca, aes(x =log10(visitors))) +
geom_density(fill = "indianred3") +
labs(x = "Number of visitors", y="density", title="Kernal density of Visitors")
density_plot
t <- list(family = "Helvetica",size = 14,color = "blue")
t1 <- list(family = "Times New Roman",color = "red")
t2 <- list(family = "Courier New",size = 14,color = "green")
t3 <- list(family = 'Arial')
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Year and Visitors"),
legend = list(title = list(text ='<b>National Parks')),
xaxis  = list(title = list(text ='<b>Year')),
yaxis  = list(title = list(text ='<b>Visitors')),
plot_bgcolor='#e5ecf6')
scatter_plot
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on the Data-Set"),
legend = list(title = list(text= '<b>Attribute')),
xaxis  = list(title = list(text ='<b>Parks')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df_order = data.frame(table(ca$park_name))
df_order
pie_chart = plot_ly(type='pie', labels=df_order$Var1, values=df_order$Freq,
textinfo='label+percent',insidetextorientation='radial') %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
pie_chart
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>Visitors')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
df_vore = data.frame(table(ca$code))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
library(gganimate)
library(gifski)
#scatter_plot_animate = ggplot(data=ca, aes(year, visitors)) + geom_point() +
#                       transition_states(park_name)
#animate(scatter_plot_animate, renderer = gifski_renderer())
## filtering out only 'CHIS', 'DEVA' AND 'JOTR' Park_code
d = ca %>%
filter(code%in%c('CHIS', 'DEVA', 'JOTR'))
d
#line_plot = ggplot(d, aes(x=year, y=visitors, group=code, color=code)) +
#                   geom_line() + geom_point() +
#                   transition_reveal(year)
#animate(line_plot, width=300, height=300, renderer = gifski_renderer())
library(dplyr)
df = read.csv('zomato.csv')
head(df)
names(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(`Country Code` == 1) %>%
select(`Restaurant ID`) %>%
unique() %>%
nrow()
df %>%
filter(Country.Code == 1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
df %>% filter(Country.Code == 1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(`City`,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d')+
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
ggplot(data=df, aes(x=Longitude, y=Latitude),
color='white', fill=population) +
geom_polygon() +
scale_fill_viridis_d(option='A')
ggplot(data=df, aes(x=Longitude, y=Latitude ,group=Country.Code),
color='white', fill=population) +
geom_polygon() +
scale_fill_viridis_d(option='A')
df_india = df %>% filter(Country.Code == 1)
head(df_india)
ggplot(data=df_india, aes(x=Longitude, y=Latitude),
color='white', fill=population) +
geom_polygon() +
scale_fill_viridis_d(option='A')
ggplot(data=df_india, aes(x=Longitude, y=Latitude),
color='white') +
geom_polygon() +
scale_fill_viridis_d(option='A')
df_india = df %>% filter(Country.Code == 1 & City==Agra)
df_india = df %>% filter(Country.Code == 1 & City=Agra)
df_india = df %>% filter(Country.Code == 1 & City == 'Agra')
head(df_india)
ggplot(data=df_india, aes(x=Longitude, y=Latitude),
color='white') +
geom_polygon() +
scale_fill_viridis_d(option='A')
scatter_plot_animate = ggplot(data=ca, aes(year, visitors)) + geom_point() +
transition_states(park_name)
animate(scatter_plot_animate, renderer = gifski_renderer())
## filtering out only 'CHIS', 'DEVA' AND 'JOTR' Park_code
d = ca %>%
filter(code%in%c('CHIS', 'DEVA', 'JOTR'))
d
line_plot = ggplot(d, aes(x=year, y=visitors, group=code, color=code)) +
geom_line() + geom_point() +
transition_reveal(year)
animate(line_plot, width=300, height=300, renderer = gifski_renderer())
library(gganimate)
library(gifski)
scatter_plot_animate = ggplot(data=ca, aes(year, visitors)) + geom_point() +
transition_states(park_name)
animate(scatter_plot_animate, renderer = gifski_renderer())
## filtering out only 'CHIS', 'DEVA' AND 'JOTR' Park_code
d = ca %>%
filter(code%in%c('CHIS', 'DEVA', 'JOTR'))
d
line_plot = ggplot(d, aes(x=year, y=visitors, group=code, color=code)) +
geom_line() + geom_point() +
transition_reveal(year)
animate(line_plot, width=300, height=300, renderer = gifski_renderer())
library(tidyverse)
library(plotly)
require(devtools)
# National Parks in California
ca = read_csv("https://raw.githubusercontent.com/ScienceParkStudyGroup/r-lesson-based-on-ohi-data-training/gh-pages/data/ca.csv")
head(ca)
colnames(ca)
str(ca)
labs = c(
'CHIS'='Channel Islands National Park',
'DEVA'='Death Valley National Park',
'JOTR'='Joshua Tree National Park',
'KICA'='Kings Canyon National Park',
'LAVO'='Lassen Volcanic National Park',
'YOSE'='Yosemite National Park',
'SEQU'='Sequoia National Park',
'REDW'='Redwood National Park',
'PINN'='Pinnacles National Park'
)
bar_plot = ggplot(data=ca, aes(x = code, y = ..count.. / sum(..count..),fill = factor(code))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_x_discrete(labels =labs)
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
density_plot = ggplot(data=ca, aes(x =log10(visitors))) +
geom_density(fill = "indianred3") +
labs(x = "Number of visitors", y="density", title="Kernal density of Visitors")
density_plot
t <- list(family = "Helvetica",size = 14,color = "blue")
t1 <- list(family = "Times New Roman",color = "red")
t2 <- list(family = "Courier New",size = 14,color = "green")
t3 <- list(family = 'Arial')
scatter_plot = plot_ly(data=ca, x=~year, y=~visitors,color = ~park_name, type='scatter',mode='markers') %>%
layout(
title= list(text = "<b>Year and Visitors"),
legend = list(title = list(text ='<b>National Parks')),
xaxis  = list(title = list(text ='<b>Year')),
yaxis  = list(title = list(text ='<b>Visitors')),
plot_bgcolor='#e5ecf6')
scatter_plot
r_group_barchart = data.table::melt(ca, id.vars='park_name') %>%
plot_ly(x = ~park_name, y = ~value, type = 'bar', name = ~variable, color = ~variable) %>%
layout(
title= list(text = "<b>Total Distribution based on the Data-Set"),
legend = list(title = list(text= '<b>Attribute')),
xaxis  = list(title = list(text ='<b>Parks')),
yaxis = list(title='Count', text='<b>Count'), barmode = 'group')
r_group_barchart
df_order = data.frame(table(ca$park_name))
df_order
pie_chart = plot_ly(type='pie', labels=df_order$Var1, values=df_order$Freq,
textinfo='label+percent',insidetextorientation='radial') %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
pie_chart
histogram_plot = plot_ly(data = ca, x = ~(log(visitors)), name=~code,type="histogram") %>%
layout(
title= list(text = "<b>Total sleep time of Animals based on Vore"),
legend = list(title = list(text= '<b>Vore')),
xaxis  = list(title = list(text ='<b>Visitors')),
yaxis  = list(title = list(text ='<b>Count')))
histogram_plot
df_vore = data.frame(table(ca$code))
df_vore
donut_chart = plot_ly(labels=df_vore$Var1, values=df_vore$Freq,
textinfo='label+percent') %>%
add_pie(hole = 0.6) %>%
layout(
title= list(text = "<b>Order Distributions"),
legend = list(title = list(text= '<b>Order')))
donut_chart
library(dplyr)
df = read.csv('zomato.csv')
head(df)
names(df)
str(df)
bar_plot = ggplot(data=df, aes(x = `Rating.color`, y = ..count.. / sum(..count..),fill = factor(`Rating.color`))) +
geom_bar(color='black') +
labs(x = "National Parks", y = "Percentage of National Parks in the data-set",
title = "Occurence of the National Parks in the data-set") +
scale_y_continuous(labels = scales::percent)
bar_plot + coord_flip()
df %>%
filter(Country.Code == 1) %>%
select(Restaurant.ID) %>%
unique() %>%
nrow()
df %>% filter(Country.Code == 1) %>% select(Restaurant.ID,City) %>% unique() %>% group_by(City) %>% summarise(n=n()) %>%
ggplot(aes(x=reorder(`City`,n),y=n))+ geom_bar(stat = 'identity',fill='#cb202d') +
coord_flip() +
theme(panel.background = element_blank(),
strip.background = element_blank(),
axis.title = element_text(color = '#2d2d2d'),
strip.text.x = element_text(color='#2d2d2d',face='bold',size=10),
plot.title = element_text(hjust=0.5,face='bold',size=15))+
labs(x='City',y='Number of Restaurants',title="Number of Restaurants by City")
df_india = df %>% filter(Country.Code == 1 & City == 'Agra')
head(df_india)
ggplot(data=df_india, aes(x=Longitude, y=Latitude),
color='white') +
geom_polygon() +
scale_fill_viridis_d(option='A')
library(gganimate)
library(gifski)
## filtering out only 'CHIS', 'DEVA' AND 'JOTR' Park_code
d = ca %>%
filter(code%in%c('CHIS', 'DEVA', 'JOTR'))
d
